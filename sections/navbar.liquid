<nav>
    <div class="container">
        <div class="nav__inner">
            <div class="nav__logo  {% if template.name != "index" %} nav__logo--dark {% endif %}">
                <a href="{{ routes.root_url }}">{% render "icon-logo" %}</a>
            </div>
            <ul class="nav__links">
                {% for link in linklists.main-menu.links %}
                <li><a href="{{ link.url }}" class="nav__link">{{ link.title }}</a></li>
                {% endfor %}
            </ul>
            <div class="nav__auth">
                {% if shop.customer_accounts_enabled %}
                {% if customer %}
                    <a href="{{ routes.search_url }}">{% render "icon-search" %}</a>

                    <a href="{{ routes.account_url }}">Account</a>
                    <a href="{{ routes.account_logout_url }}">Log Out</a>

                    <a href="{{ routes.cart_url }}" class="cart_btn">{% render "icon-cart" %}</a>
                {% else %}
                    <a href="{{ routes.search_url }}">{% render "icon-search" %}</a>
                    <a href="{{ routes.account_login_url }}">{% render "icon-account" %}</a>
                    <a href="{{ routes.cart_url }}" class="cart_btn">{% render "icon-cart" %}</a>
                {% endif %}
                {% endif %}
            </div>

        </div>
    </div>
    {% render "cart" %}
</nav>

<script>
    document.querySelector(".cart_btn").addEventListener("click", e=>{
    e.preventDefault();
    document.querySelector(".cart").classList.add("active")
    render_cart()
    })
    document.querySelector(".close_cart").addEventListener("click", e=>{
        document.querySelector(".cart").classList.remove("active")
    })
    document.querySelector(".cart__items").addEventListener("click", e=>{
        if(e.target.classList.contains("cart_item__remove")){
        remove_item_from_cart(e.target.getAttribute("data-key"), e.target.parentElement.parentElement)
        } 
        else if(e.target.classList.contains("plus")){
            update_cart("+", e.target)
        }
        else if(e.target.classList.contains("minus")){
            update_cart("-", e.target)
        }
    })
    function remove_item_from_cart(key, target) {
        let formData = {
                "id": key,
                "quantity": 0
            };
            fetch(window.Shopify.routes.root + 'cart/change.js', {
                method: 'POST',
                headers: {
                'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
            .then(res=>{
                res.json().then((changed)=>{
                    document.querySelector(".cart_item__total").textContent = `$${(changed.items_subtotal_price/100).toFixed(2)}`
                    if(!changed.item_count){ empty_cart(); return }
                })
            })
            .catch((error) => {
                console.error('Error:', error);
            });
            target.remove()
    }
    function update_cart(sign, target) {
        let item = target.parentElement.parentElement.parentElement;
        let key = item.querySelector(".cart_item__remove").getAttribute("data-key")
        let qty = null;
        if (sign==="+"){
            qty = Number(target.previousElementSibling.textContent) + 1
        } else{
            if (Number(target.nextElementSibling.textContent) > 1) {
                qty = Number(target.nextElementSibling.textContent) - 1;
                target.parentElement.querySelector(".plus").classList.remove("not_allowed")
                target.parentElement.querySelector(".plus").removeAttribute("disabled")
            }else{
                remove_item_from_cart(key, item)
                return;
            }
        } 
        let formData = {
            "id": key,
            "quantity": qty
        };
        fetch(window.Shopify.routes.root + 'cart/change.js', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        })
        .then(res=>{
            res.json().then((changed)=>{
                document.querySelector(".cart_item__total").textContent = `$${(changed.items_subtotal_price/100).toFixed(2)}`;
                if(!changed.item_count){ empty_cart(); return }

                let current = changed.items.find((item)=>item.key === key);
                if(qty <= current.quantity){
                    target.classList.remove("not_allowed")
                    if (sign==="+"){
                        target.previousElementSibling.textContent = qty;
                    } else{
                        target.nextElementSibling.textContent = qty;
                    } 
                    item.querySelector(".cart_item__price").textContent = `$${(current.original_line_price/100).toFixed(2)}`;
                }else{
                    target.classList.add("not_allowed")
                    target.setAttribute("disabled", "")
                    return false
                }
            })
        })
        .catch((error) => {
            console.error('Error:', error);
        });
    }
    function empty_cart() {
        document.querySelector(".cart__items").innerHTML = `
            <div class="empty_cart">
                <p>Your Cart is Empty</p>
                <a class="btn btn--secondary" href="/collections/test">Shop Best Sellers</a>
            </div>
            `;
        return
    }
    function render_cart() {
    fetch(window.Shopify.routes.root + 'cart.js', {
        method: 'GET',
        headers: {
        'Content-Type': 'application/json'
        }
    })
    .then(res=>{
        return res.json()
    })
    .then(cart_data=>{
        document.querySelector(".cart__items").innerHTML = "";
        document.querySelector(".cart_item__total").textContent = `$${(cart_data.items_subtotal_price/100).toFixed(2)}`;

        if(!cart_data.item_count){ empty_cart(); return }

        let content = "";
        cart_data.items.forEach(item=>{
            let variant_options = item.variant_options.reduce((acc, curr)=>{
                return acc + `<div class="cart_item__option">${curr}</div>`
            }, "")
            content += `
                <div class="cart_item">
                    <div class="cart_item__left">
                        <img src="${item.image}" alt="product img">
                    </div>
                    <div class="cart_item__center">
                        <div class="cart_item__center__top">
                            <div class="text-12 cart_item__title">${item.product_title}</div>
                            ${variant_options}
                        </div>
                        <div class="cart_item__counters">
                            <button type="button" class="minus cart_item__counter">{% render "icon-minus" %}</button>
                            <span class="cart_item__quantity">${item.quantity}</span>
                            <button type="button" class="plus cart_item__counter">{% render "icon-plus" %}</button>
                        </div>
                    </div>
                    <div class="cart_item__right">
                        <div class="cart_item__price">$${(item.original_line_price/100).toFixed(2)}</div>
                        <button type="button" data-key="${item.key}" class="cart_item__remove">{% render "icon-x" %}</button>
                    </div>
                </div>
            `
        })
        document.querySelector(".cart__items").innerHTML = content;
    })
    .catch((error) => {
        console.error('Error:', error);
    });
}
</script>

{% schema %}
{
  "name": "Cart settings",
  "settings": [
    {
      "type": "text",
      "id": "hero__title",
      "label": "Hero title change",
      "default": "Team barbell"
    },
    {
      "type": "text",
      "id": "hero__btn",
      "label": "Hero button text change",
      "default": "Explore"
    },
    {
      "type": "url",
      "id": "hero__btn__url",
      "label": "Hero button url change"
    },
    {
      "type": "image_picker",
      "id": "hero__bg",
      "label": "Hero img change"
    }
  ]

}
{% endschema %}